datasource db {
  provider          = "postgresql"
  url               = "postgres://ueqtverrzurckf:f3e3b869e0b0d6bb0ac624a5e146661ec4aedd5c682f57dc09f43e7070d46724@ec2-54-227-248-71.compute-1.amazonaws.com:5432/d49g3c3ptb3ve8?sslmode=require&pgbouncer=true"
  shadowDatabaseUrl = "postgres://ueqtverrzurckf:f3e3b869e0b0d6bb0ac624a5e146661ec4aedd5c682f57dc09f43e7070d46724@ec2-54-227-248-71.compute-1.amazonaws.com:5432/d49g3c3ptb3ve8?sslmode=require&pgbouncer=true"
}

generator client {
  provider      = "prisma-client-js"
  binaryTargets = "native"
}

model User {
  id                  Int       @id @default(autoincrement())
  userName            String?
  phoneNo             String
  email               String    @unique
  hashedPassword      String
  salt                String
  resetToken          String?
  resetTokenExpiresAt DateTime?
  roles               String?
}

model Restaurant {
  id   Int     @id @default(autoincrement())
  name String?
  menu Menu[]
}

model RestaurantTable {
  id            Int     @id @default(autoincrement())
  restaurant_id Int
  table_no      String
  available     Boolean
}

model Cuisine {
  id   Int     @id @default(autoincrement())
  type String?
}

model Category {
  id        Int     @id @default(autoincrement())
  type      String?
  image_url String?
}

model Menu {
  id            Int        @id @default(autoincrement())
  item_name     String?
  category_id   Int
  cuisine_id    Int
  restaurant_id Int
  Restaurant    Restaurant @relation(fields: [restaurant_id], references: [id])
}

model Order {
  id            Int     @id @default(autoincrement())
  status        String?
  user_id       Int
  restaurant_id Int
}
